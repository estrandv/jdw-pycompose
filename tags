!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
CHROMATIC	scales.py	/^CHROMATIC=[0,1,2,3,4,5,6,7,8,9,11]$/;"	v
Composer	composer.py	/^class Composer:$/;"	c
Composer libraries for jackdaw in python	readme.md	/^# Composer libraries for jackdaw in python$/;"	c
EGYPTIAN	scales.py	/^EGYPTIAN=[0,2,5,7,10]$/;"	v
HUNGARIAN_MINOR	scales.py	/^HUNGARIAN_MINOR=[0,2,3,6,7,8,11]$/;"	v
MAJOR	scales.py	/^MAJOR=[0,2,4,5,7,9,11]$/;"	v
MAJOR_PENTATONIC	scales.py	/^MAJOR_PENTATONIC=[0,2,4,7,9]$/;"	v
MIDI	composer.py	/^    MIDI = PostingType(2)/;"	v	class:PostingTypes
MINOR	scales.py	/^MINOR=[0,2,3,5,7,8,10]$/;"	v
MINOR_PENTATONIC	scales.py	/^MINOR_PENTATONIC=[0,3,5,7,10]$/;"	v
PROSC	composer.py	/^    PROSC = PostingType(0)$/;"	v	class:PostingTypes
PostingType	composer.py	/^class PostingType:$/;"	c
PostingTypes	composer.py	/^class PostingTypes:$/;"	c
SAMPLE	composer.py	/^    SAMPLE = PostingType(1)$/;"	v	class:PostingTypes
Score	score.py	/^class Score:$/;"	c
ScoreData	composer.py	/^class ScoreData:$/;"	c
Song ideas	song_ideas.md	/^# Song ideas$/;"	c
__init__	composer.py	/^    def __init__(self):$/;"	m	class:Composer
__init__	composer.py	/^    def __init__(self, id: int):$/;"	m	class:PostingType
__init__	composer.py	/^    def __init__(self, score: Score, id: str, instrument: str, posting: PostingType):$/;"	m	class:ScoreData
__init__	score.py	/^    def __init__(self):$/;"	m	class:Score
_prepare	score.py	/^    def _prepare(self, to_hz: bool):$/;"	m	class:Score
bass	main.py	/^bass = cmp.new("bass", "blipp", PostingTypes.PROSC)$/;"	v
bass_assist	main.py	/^bass_assist = cmp.new("bass_assist", "blipp", PostingTypes.PROSC)$/;"	v
borch	main.py	/^borch = cmp.new("BorchBattery", "BorchBattery", PostingTypes.MIDI)$/;"	v
bpm	rest_client.py	/^def bpm(bpm: int):$/;"	f
cmp	main.py	/^cmp = Composer()$/;"	v
current	jdw-keyboard.py	/^            current = key$/;"	v
current	jdw-keyboard.py	/^current = 4$/;"	v
drum	main.py	/^drum = cmp.new("drum", "YHDX200", PostingTypes.SAMPLE)$/;"	v
drum2	main.py	/^drum2 = cmp.new("drum2", "KORGER1", PostingTypes.SAMPLE)$/;"	v
drum3	main.py	/^drum3 = cmp.new("drum3", "KORGER1Samples", PostingTypes.SAMPLE)$/;"	v
drum4	main.py	/^drum4 = cmp.new("drum4", "YHDX200", PostingTypes.SAMPLE)$/;"	v
final_tone	jdw-keyboard.py	/^                final_tone = transpose(tone_index, scale) + (octave * (current+1))$/;"	v
join	score.py	/^    def join(self, other: Score):$/;"	m	class:Score
keys	jdw-keyboard.py	/^keys =       ['a','b','c','d','e','f','g','h','i','j','k']$/;"	v
lead	main.py	/^lead = cmp.new("lead", "longsaw", PostingTypes.PROSC)$/;"	v
lead2	main.py	/^lead2 = cmp.new("lead2", "longsaw", PostingTypes.PROSC)$/;"	v
len	composer.py	/^    def len(self):$/;"	m	class:Composer
len	score.py	/^    def len(self) -> float:$/;"	m	class:Score
locks	jdw-keyboard.py	/^locks = []$/;"	v
loop	main.py	/^loop=16.0$/;"	v
moog	main.py	/^moog = cmp.new("moog", "moogBass", PostingTypes.PROSC)$/;"	v
moog2	main.py	/^moog2 = cmp.new("moog2", "moogBass", PostingTypes.PROSC)$/;"	v
new	composer.py	/^    def new(self, id: str, instrument: str, posting: PostingType) -> Score:$/;"	m	class:Composer
octave	jdw-keyboard.py	/^octave = 11$/;"	v
octave_keys	jdw-keyboard.py	/^octave_keys = [4,5,6,7,8]$/;"	v
ordinal	jdw-keyboard.py	/^                ordinal = press_keys.index(key)$/;"	v
organ	main.py	/^organ = cmp.new("organ", "longsaw", PostingTypes.PROSC)$/;"	v
pad	score.py	/^    def pad(self, beats: float):$/;"	m	class:Score
padder	main.py	/^padder = cmp.new("padder", "blipp", PostingTypes.PROSC)$/;"	v
parse	score.py	/^def parse(note_string: str) -> List[Dict]:$/;"	f
peek_notes	score.py	/^    def peek_notes(self):$/;"	m	class:Score
play	rest_client.py	/^def play(note: float, synth_name: str):$/;"	f
play	score.py	/^    def play(self, note_string: str):$/;"	m	class:Score
play_latest	score.py	/^    def play_latest(self):$/;"	m	class:Score
post	score.py	/^    def post(self, name: str, key: str):$/;"	m	class:Score
post_all	composer.py	/^    def post_all(self):$/;"	m	class:Composer
post_prosc	score.py	/^    def post_prosc(self, name: str, key: str):$/;"	m	class:Score
post_sample	score.py	/^    def post_sample(self, name: str, key: str):$/;"	m	class:Score
press_keys	jdw-keyboard.py	/^press_keys = ['q','w','e','r','t','y','u','i','o','p','Ã¥']$/;"	v
project_opened	.vscode/.ropeproject/config.py	/^def project_opened(project):$/;"	f
reach	score.py	/^    def reach(self, length: float):$/;"	m	class:Score
reset	rest_client.py	/^def reset():$/;"	f
rhodes	main.py	/^rhodes = cmp.new("FMRhodes1", "FMRhodes1", PostingTypes.PROSC)$/;"	v
scale	jdw-keyboard.py	/^scale = MAJOR$/;"	v
scale	main.py	/^scale = MAJOR$/;"	v
scale	score.py	/^    def scale(self, scale: List[int]):$/;"	m	class:Score
selected_synth	jdw-keyboard.py	/^                selected_synth = 0$/;"	v
selected_synth	jdw-keyboard.py	/^selected_synth = 0$/;"	v
set_prefs	.vscode/.ropeproject/config.py	/^def set_prefs(prefs):$/;"	f
sinepad	main.py	/^sinepad = cmp.new("sinepad1", "sinepad", PostingTypes.PROSC)$/;"	v
start_here	composer.py	/^    def start_here(self):$/;"	m	class:Composer
sync	composer.py	/^    def sync(self):$/;"	m	class:Composer
synths	jdw-keyboard.py	/^synths = ["blipp", "FMRhodes1", "varsaw", "sinepad"]$/;"	v
test_scales	scales.py	/^def test_scales():$/;"	f
tone_index	jdw-keyboard.py	/^                tone_index = ordinal$/;"	v
transpose	scales.py	/^def transpose(tone_index: int, scale: List[int]) -> int:$/;"	f
tweak	rest_client.py	/^def tweak(synth_name: str, values):$/;"	f
varsaw	main.py	/^varsaw = cmp.new("varsaw1", "varsaw", PostingTypes.PROSC)$/;"	v
varsaw2	main.py	/^varsaw2 = cmp.new("varsaw2", "varsaw", PostingTypes.PROSC)$/;"	v
warsaw	main.py	/^warsaw = cmp.new("warsaw", "warsawBass", PostingTypes.PROSC)$/;"	v
warsaw2	main.py	/^warsaw2 = cmp.new("warsaw2", "warsawBass", PostingTypes.PROSC)$/;"	v
