
$args = freq440,amp1,gate1,sus1,pan0,attT0,decT0,susL1,relT0.2,out0
$adsr(gen) = $:gen = $:gen * EnvGen.ar(envelope: Env.adsr(attT, decT, susL, relT), gate: gate, doneAction: Done.freeSelf)
$adsrd(gen) = $:gen = $:gen * EnvGen.ar(envelope: Env.adsr(attT, decT, susL, relT), gate: gate, doneAction: Done.none)
$stereo(gen) = $:gen = Pan2.ar(Mix($:gen) * 0.5, pan)
$hpf(gen,floor) = $:gen = HPF.ar(in: $:gen, freq: $:floor, mul: 1.0, add: 0.0)
$lpf(gen,roof) = $:gen = LPF.ar(in: $:gen, freq: $:roof, mul: 1.0, add: 0.0)

degrade
args: out0,fx8
    // Effect taken from "supercollider lofi tutorial"

    osc = In.ar(out, 2);
    shrate = 22050 / fx;

    // Use latch to "bitcrush"
    trig = Impulse.ar(shrate);
    osc = Latch.ar(osc, trig) * 0.5;
    ReplaceOut.ar(out, osc)

~

dangerBass
args: $args,drive0.8,resF0.5,relT0.5,attT0.01
    
    // Use a Saw wave oscillator with a subtle detune to give it a fuller sound
    osc = (Saw.ar(freq, 0.5) + Saw.ar(freq + 2, 0.5)) * 0.5;
    
    // Apply a bit of distortion to add grit (like in Danger Zone)

    driveEffect = osc + (osc * (drive * 50)).clip(0,0.2).fold2(2);
    
    // Filter - A low-pass filter to emphasize the low end with some resonance
    filt = RLPF.ar(driveEffect, freq * 2, resF); // Resonant low-pass filter
    
    // Envelope for percussive pluck
    env = EnvGen.ar(Env.perc(attT, relT), doneAction: 2);
    
    // Apply envelope and amplitude, then pan the sound
    Out.ar(0, Pan2.ar(filt * env * amp, pan))
~

trumpet
args: $args,attT0.001,decT0.2,susL0.3,relT0.2
	num = 16;
	harms = Array.series(num, 1, 1) * Array.exprand(num, 0.995, 1.001);
	snd = SinOsc.ar(freq * SinOsc.kr(Rand(2.0,5.0),0,Rand(0.001, 0.01),1) * harms, mul:Array.geom(num, 1, 0.63));
	snd = Splay.ar(snd);
	snd = BBandPass.ar(snd, freq * XLine.kr(0.1,4,0.01), 2);
	snd = snd * amp;
	$adsr(snd);
	Out.ar(out, snd!2)

~

cheapPiano
args: $args,tone0.25,hollowness0
	env = Env.perc(attT, relT, amp * 4, -1).ar(doneAction: 2);

	// Delay line times: freq, freq - 4 cents, freq + 3 cents. In the original this was done by converting freq to midi.
	delay = (1 / (freq * [2.pow(-0.04/12), 1, 2.pow(0.03/12)]));
	tonefreq = tone.linlin(0, 1, 1000, 5000);

	hammer = Decay2.ar(
		in: Impulse.ar(0.001),
		attackTime: 0.008,
		decayTime: 0.04,
		mul: LFNoise2.ar(freq: amp.linlin(0, 1, tonefreq, 2 * tonefreq), mul: 0.25)
	); //Try LFNoise1, LFNoise0, or even LFClipNoise above for a slightly grainier sound.

	snd = CombL.ar(hammer, delay, delay, 50 * amp);
	snd = HPF.ar(snd, hollowness.linlin(0, 1, 50, 1000));
	snd = snd * env;
	snd = Limiter.ar(snd);
	Out.ar(out, Pan2.ar(snd, pan))

~

eighties
args: $args,decT0.7,susL0.3,attT0.002

    amp = amp * 14;

    lfo = LFPar.ar(freq * 0.5, mul: amp / 2);
    // Second saw freq * 1.0054 gives a nice resonance but might detune too hard
    osc = VarSaw.ar(freq + lfo, mul: amp) + Saw.ar(freq + lfo * 1.0054, mul: amp * 0.5);

    ev = Env.perc(attT, decT, susL, curve: -6);
    env = EnvGen.ar(envelope: ev, gate: gate, doneAction: Done.freeSelf);

    osc = osc * env;
    osc = LPF.ar(in: osc, freq: env * freq + 300, mul: 1, add: 0.0);
    osc = HPF.ar(in: osc, freq: 180, add: 0.0);

    $stereo(osc);
    Out.ar(out, osc)
~


FMRhodes
args: $args,osc4.8,oscmix0.1,amod0.2,tension0.2,chime0.2

    env1 = Env.perc(attT, relT * 1.25, amod, curve: \lin).kr;
    env2 = Env.perc(attT, relT, amod, curve: \lin).kr;
    env3 = Env.perc(attT, relT * 1.5, amod, curve: \lin).kr;
    env4 = Env.perc(attT, relT * 1.5, amod, curve: \lin).kr;

    osc4 = SinOsc.ar(freq) * 6.7341546494171 * tension * env4;
    osc3 = SinOsc.ar(freq * 2, osc4) * env3;
    osc2 = SinOsc.ar(freq * 30) * 0.683729941 * env2;
    osc1 = SinOsc.ar(freq * 2, osc2) * env1;
    snd = Mix((osc3 * (1 - chime)) + (osc1 * chime));
  	snd = snd * (SinOsc.ar(osc).range((1 - oscmix), 1));

    snd = snd * Env.asr(0, 1, 0.1).kr(gate: gate, doneAction: Done.freeSelf);
    snd = Pan2.ar(snd, pan, amp);

    Out.ar(out, snd)

~

subBass
args: $args,att0.001,rel1,curve8,blend0.5

    //A slightly rounded percussive envelope
	env = Env.perc(att, rel, amp, [curve, -1 * curve]).kr(doneAction: 2);

	/*  Input wave +/- 90 degrees - To use SinOsc.ar, replace:
	        -"iphase:  0" with "phase: pi/2"
	        -"iphase:  1" with "phase: 0"
	        -"iphase: -1" with "phase: pi"   */
	in = LFPar.ar(freq: freq * 2, iphase: 0);
	ina = LFPar.ar(freq: freq * 2, iphase: 1);
	inb = LFPar.ar(freq: freq * 2, iphase: -1);

	//Two square waves exactly out of phase and an octave below the input wave
	synca = LFPulse.ar(freq: freq, iphase: 0);
	syncb = LFPulse.ar(freq: freq, iphase: 0.5);

	//This smoothly swaps between outputting the +90 degree wave and -90 degree wave
	octa = ina * synca;
	octb = inb * syncb;
	octave = Mix.ar([octa, octb]);

	//Mixer stage, volume adjustments, envelope, and output
	snd = Mix.ar([octave * blend, in * (blend - 1)]);
    snd = LeakDC.ar(snd);
	snd = Limiter.ar(in: snd, level: 1);
	snd = snd * env;

    Out.ar(out, Pan2.ar(snd, pan))

~

wobble
args: $args,lfo0.0

    amp = amp * 3;
    osc = Pulse.ar(freq, mul: amp / 4, width: 0.5) * LFPar.ar(freq - 2.1864, mul:amp, iphase: 0.2) * SinOsc.ar(freq * 6.0012, mul: amp);
    osc = osc + SinOsc.ar(freq * 4.012, mul:0.8*amp);
    $adsr(osc);
    $lpf(osc, 500);
    $hpf(osc, 30);
    $stereo(osc);
    Out.ar(out, osc)

~

hypersaw
args: $args,decT0.2,susL0.5,prt0
    freq = freq.lag(prt);
    amp = amp.lag(prt);
    osc = Mix(Saw.ar(freq * [1.011,2.0034,3.41,1.0001], mul: [amp * 0.25, amp * 0.4, amp * 0.1, amp * 0.5]));
    osc = osc + VarSaw.ar(freq * 2, mul: amp * 0.5) + SinOsc.ar(freq * 2.022, mul:amp * 0.2);
    $adsr(osc);
    $stereo(osc);
    Out.ar(out, osc)

~

dguitar
args: $args,dbamp1,snd0,relT2

    //amp = amp * -12;
    string = { |sfreq|
    Pluck.ar(
        SinOsc.ar(Line.ar(1000, 50, 0.01))
        *
        Env.perc(0.001, 0.1).ar,
        Impulse.ar(0.01), sfreq.reciprocal, sfreq.reciprocal, 5, 0.5)
    };
    snd = string.(freq) + string.(freq * 1.5) + string.(freq * 2);
    snd = (snd * 32.dbamp).tanh;
    snd = RLPF.ar(snd, 3000, 0.5);
    snd = (snd * 32.dbamp).tanh;
    snd = RLPF.ar(snd, 500, 0.5);
    snd = (snd * 32.dbamp).tanh;
    snd = LeakDC.ar(snd);
    snd = DelayC.ar(snd, 0.1, SinOsc.kr(2, [0, 1pi]).range(0, 1e-4));
    $adsr(snd);
    // uncomment for reverb 3.10
    // snd = snd + (NHHall.ar(snd, 1) * -5.dbamp);
    snd * -20.dbamp;
    Out.ar(out, Pan2.ar(snd, pan));

~

looper_bass
args: $args,cutoff1000,rq0.2,pan0.0,drive2.0,filtertime1,susL0.2

	osc = Saw.ar(freq);
	oschiend = Mix(Saw.ar(freq*[0.25,1,1.5],[0.5,0.4,0.1]));

	filterenv = EnvGen.ar(Env.adsr(attT,decT,susL,relT),gate, timeScale: filtertime,doneAction:Done.freeSelf);
	filter =  RLPF.ar(osc,cutoff*filterenv+100,rq);

	filterhiend =  RLPF.ar(oschiend,cutoff*filterenv+100,rq);
	ab = abs(filterhiend);
	filterhiend = (filterhiend*(ab + drive)/(filterhiend ** 2 + (drive - 1) * ab + 1));
	//remove low end
	filterhiend = BLowShelf.ar(filterhiend,300,1.0,-12);
	//dip at 1600Hz
	filterhiend = BPeakEQ.ar(filterhiend,1600,1.0,-6);

	env = EnvGen.ar(Env.adsr(0.01,0.0,0.9,0.05),gate,doneAction:2);

	sig = filter*env*amp*2;
	sighiend = filterhiend*env*amp*2;

	Out.ar(out,Pan2.ar(filter*env*amp*2,pan))

~


hypersaw_drone
args: $args,decT0.2,susL0.5,prt0
    freq = freq.lag(prt);
    amp = amp.lag(prt);
    osc = Mix(Saw.ar(freq * [1.011,2.0034,3.41,1.0001], mul: [amp * 0.25, amp * 0.4, amp * 0.1, amp * 0.5]));
    osc = osc + VarSaw.ar(freq * 2, mul: amp * 0.5) + SinOsc.ar(freq * 2.022, mul:amp * 0.2);
    $adsrd(osc);
    $stereo(osc);
    Out.ar(out, osc)

~

plink
args: $args,amp0.2,lfo3.999991992,relT2.5,decT0.125,susL0.2

    lfom = LFPar.ar(lfo * freq, mul: amp);
    osc = Pulse.ar([freq, freq*1.99212], mul: [amp + lfom, amp*0.25]);
    $adsr(osc);
    $stereo(osc);
    Out.ar(out, osc)

~

noise
args: $args,relT2
    osc = BrownNoise.ar(mul: amp + LFTri.ar(freq * 0.02002, mul:0.2)) * SinOsc.ar(freq * 2, mul:amp);
    osc = Ringz.ar(osc, freq * 1.002, 0.25, mul:0.01);
    $adsr(osc);
    $stereo(osc);
    Out.ar(out, osc)


~

dcompressor
args: out0,rat4,thr40,att0.1,rel100.1,mku0.5

    thr = thr * -1;

    osc = In.ar(out, 2);

    osc = DCompressor.ar(
        osc,
        sidechainIn: 0,
        sidechain: 0,
        ratio: rat,
        threshold: thr,
        attack: att,
        release: rel,
        makeup: mku,
        automakeup: 1
    );

    ReplaceOut.ar(out, osc)

~

resonator
args: out0,dmp0.2,brg0.2
    osc = In.ar(out, 2);

    osc = Resonator.ar(
        input: osc,
        freq: 440,
        position: 0.001,
        resolution: 14,
        structure: 0.5,
        brightness: brg,
        damping: dmp
    );

    ReplaceOut.ar(out, osc)
