
$args = freq440,amp1,gate1,sus1,pan0,attT0,decT0,susL1,relT0.2,out0
$adsr(gen) = $:gen = $:gen * EnvGen.ar(envelope: Env.adsr(attT, decT, susL, relT), gate: gate, doneAction: Done.freeSelf)
$stereo(gen) = $:gen = Pan2.ar(Mix($:gen) * 0.5, pan)
$hpf(gen,floor) = $:gen = HPF.ar(in: $:gen, freq: $:floor, mul: 1.0, add: 0.0)
$lpf(gen,roof) = $:gen = LPF.ar(in: $:gen, freq: $:roof, mul: 1.0, add: 0.0)

degrade
args: out0,fx8
    // Effect taken from "supercollider lofi tutorial"

    osc = In.ar(out, 2);
    shrate = 22050 / fx;

    // Use latch to "bitcrush"
    trig = Impulse.ar(shrate);
    osc = Latch.ar(osc, trig) * 0.5;
    ReplaceOut.ar(out, osc)

~

cheapPiano
args: $args,tone0.25,hollowness0
	env = Env.perc(attT, relT, amp * 4, -1).ar(doneAction: 2);

	// Delay line times: freq, freq - 4 cents, freq + 3 cents. In the original this was done by converting freq to midi.
	delay = (1 / (freq * [2.pow(-0.04/12), 1, 2.pow(0.03/12)]));
	tonefreq = tone.linlin(0, 1, 1000, 5000);

	hammer = Decay2.ar(
		in: Impulse.ar(0.001),
		attackTime: 0.008,
		decayTime: 0.04,
		mul: LFNoise2.ar(freq: amp.linlin(0, 1, tonefreq, 2 * tonefreq), mul: 0.25)
	); //Try LFNoise1, LFNoise0, or even LFClipNoise above for a slightly grainier sound.

	snd = CombL.ar(hammer, delay, delay, 50 * amp);
	snd = HPF.ar(snd, hollowness.linlin(0, 1, 50, 1000));
	snd = snd * env;
	snd = Limiter.ar(snd);
	Out.ar(out, Pan2.ar(snd, pan))

~

eighties
args: $args,boo0.2

    amp = amp * 14;

    lfo = LFPar.ar(freq * 0.5, mul: amp / 2);
    // Second saw freq * 1.0054 gives a nice resonance but might detune too hard
    osc = VarSaw.ar(freq + lfo, mul: amp) + Saw.ar(freq + lfo * 1.0054, mul: amp * 0.5);

    ev = Env.perc(0.002, 0.7, 0.3, curve: -6);
    env = EnvGen.ar(envelope: ev, gate: gate, doneAction: Done.freeSelf);

    osc = osc * env;
    osc = LPF.ar(in: osc, freq: env * freq + 300, mul: 1, add: 0.0);
    osc = HPF.ar(in: osc, freq: 180, add: 0.0);

    $stereo(osc);
    Out.ar(out, osc)
~

subBass
args: $args,att0.001,rel1,curve8,blend0.5

    //A slightly rounded percussive envelope
	env = Env.perc(att, rel, amp, [curve, -1 * curve]).kr(doneAction: 2);

	/*  Input wave +/- 90 degrees - To use SinOsc.ar, replace:
	        -"iphase:  0" with "phase: pi/2"
	        -"iphase:  1" with "phase: 0"
	        -"iphase: -1" with "phase: pi"   */
	in = LFPar.ar(freq: freq * 2, iphase: 0);
	ina = LFPar.ar(freq: freq * 2, iphase: 1);
	inb = LFPar.ar(freq: freq * 2, iphase: -1);

	//Two square waves exactly out of phase and an octave below the input wave
	synca = LFPulse.ar(freq: freq, iphase: 0);
	syncb = LFPulse.ar(freq: freq, iphase: 0.5);

	//This smoothly swaps between outputting the +90 degree wave and -90 degree wave
	octa = ina * synca;
	octb = inb * syncb;
	octave = Mix.ar([octa, octb]);

	//Mixer stage, volume adjustments, envelope, and output
	snd = Mix.ar([octave * blend, in * (blend - 1)]);
    snd = LeakDC.ar(snd);
	snd = Limiter.ar(in: snd, level: 1);
	snd = snd * env;

    Out.ar(out, Pan2.ar(snd, pan))

~

wobble
args: $args,lfo0.0

    amp = amp * 3;
    osc = Pulse.ar(freq, mul: amp / 4, width: 0.5) * LFPar.ar(freq - 2.1864, mul:amp, iphase: 0.2) * SinOsc.ar(freq * 6.0012, mul: amp);
    osc = osc + SinOsc.ar(freq * 4.012, mul:0.8*amp);
    $adsr(osc);
    $lpf(osc, 500);
    $hpf(osc, 30);
    $stereo(osc);
    Out.ar(out, osc)

~

hypersaw
args: $args,decT0.2,susL0.5,prt0
    freq = freq.lag(prt);
    amp = amp.lag(prt);
    osc = Mix(Saw.ar(freq * [1.011,2.0034,3.41,1.0001], mul: [amp * 0.25, amp * 0.4, amp * 0.1, amp * 0.5]));
    osc = osc + VarSaw.ar(freq * 2, mul: amp * 0.5) + SinOsc.ar(freq * 2.022, mul:amp * 0.2);
    $adsr(osc);
    $stereo(osc);
    Out.ar(out, osc)

~

plink
args: $args,amp0.2,lfo3.999991992,relT2.5,decT0.125,susL0.2

    lfom = LFPar.ar(lfo * freq, mul: amp);
    osc = Pulse.ar([freq, freq*1.99212], mul: [amp + lfom, amp*0.25]);
    $adsr(osc);
    $stereo(osc);
    Out.ar(out, osc)

~

noise
args: $args,relT2
    osc = BrownNoise.ar(mul: amp + LFTri.ar(freq * 0.02002, mul:0.2)) * SinOsc.ar(freq * 2, mul:amp);
    osc = Ringz.ar(osc, freq * 1.002, 0.25, mul:0.01);
    $adsr(osc);
    $stereo(osc);
    Out.ar(out, osc)


~

dcompressor
args: out0,rat4,thr40,att0.1,rel100.1,mku0.5

    thr = thr * -1;

    osc = In.ar(out, 2);

    osc = DCompressor.ar(
        osc,
        sidechainIn: 0,
        sidechain: 0,
        ratio: rat,
        threshold: thr,
        attack: att,
        release: rel,
        makeup: mku,
        automakeup: 1
    );

    ReplaceOut.ar(out, osc)

~

resonator
args: out0,dmp0.2,brg0.2
    osc = In.ar(out, 2);

    osc = Resonator.ar(
        input: osc,
        freq: 440,
        position: 0.001,
        resolution: 14,
        structure: 0.5,
        brightness: brg,
        damping: dmp
    );

    ReplaceOut.ar(out, osc)
