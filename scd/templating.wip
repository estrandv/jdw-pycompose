SynthDef.new("oc2bass", {|
	//Blend goes from 0 to 1
	out = 0, amp = 0.5, pan = 0, freq = 440, att = 0.001, rel = 0.15, curve = -8, blend = 0.5|

        var env, in, ina, synca, octa, inb, syncb, octb, octave, snd;

        //A slightly rounded percussive envelope
        env = Env.perc(att, rel, amp, [curve, -1 * curve]).kr(doneAction: 2);

        //Input wave - To use SinOsc.ar, replace "iphase: 2" with "phase: 3pi/2"
        in = LFPar.ar(freq: freq * 2, iphase: 2);

        //Mirroring the wave around the x-axis
        ina = in.range(0, 1);
        inb = ina * -1;

        //Two square waves exactly out of phase and an octave below the input wave
        synca = LFPulse.ar(freq: freq, iphase: 0);
        syncb = LFPulse.ar(freq: freq, iphase: 0.5);

        //This smoothly swaps between outputting the input wave and its mirror
        octa = ina * synca;
        octb = inb * syncb;
        octave = Mix.ar([octa, octb]);

        //Mixer stage, volume adjustments, envelope, and output
        snd = Mix.ar([octave * blend * 0.5, in * (1 - blend) * 0.25]);
        snd = LeakDC.ar(snd);
        snd = Limiter.ar(in: snd, level: 1);
        snd = snd * env;

        Out.ar(out, Pan2.ar(snd, pan)); 
})

# In python 

Synthdef({
    "out":0.0,
    "amp": 1.0
}).envPerc("env", "att", "rel", "amp") # Something something first arg is assigned variable
.multiply("result", "a", "b")
.out("out", "panner")

# Then you dynamically declare all vars that are assigned but not part of default args 
# This would take a lot of templating and some things (like inline math) would be clumsier


# A neat way to compress the information is of course by keeping the parts we want from sclang
# (the method calls) while streamlining everything else (assignment operators, brackets, quotations)

oc2bass:
    args: out0 amp0.5 pan0
    declare:
        env: Env.perc(att, rel, amp, [curve, -1 * curve]).kr(doneAction: 2);
        in: LFPar.ar(freq: freq * 2, iphase: 2);
        ina: in.range(0,1)
        ...
    out: Out.ar(out, Pan2.ar(snd, pan));


split by indent-1
    line 0: synth name
    restoflines = line 
        ignore #
        if args parseargs as default_args
        if declare declarelines = dline
            varname = split first colon 
            build map<name,operation>
        save out assignment

then: 
    build arg declaration from declaration varnames not in defaults
    use template to fill in blanks

SynthDef.new("<NAME>", {|<DEFAULT_ARGS>|
    var <DECLARED_ARGS>;
    <DECLARATIONS>
    <OUT_DECLARATION>
})